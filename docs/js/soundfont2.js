!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("SoundFont2",[],t):"object"==typeof exports?exports.SoundFont2=t():e.SoundFont2=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.ts")}({"./src/chunk.ts":
/*!**********************!*\
  !*** ./src/chunk.ts ***!
  \**********************/
/*! exports provided: SF2Chunk */function(e,t,r){"use strict";r.r(t),r.d(t,"SF2Chunk",(function(){return f}));var n=r(/*! ./riff */"./src/riff/index.ts"),o=r(/*! ./constants */"./src/constants.ts"),i=r(/*! ./chunks */"./src/chunks/index.ts");function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(e){var r,n,o,i,u,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=!(o=a(t).call(this,e.id,e.length,e.buffer,e.subChunks))||"object"!==s(o)&&"function"!=typeof o?l(n):o,i=l(l(r)),c=void 0,(u="subChunks")in i?Object.defineProperty(i,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):i[u]=c,r.subChunks=e.subChunks.map((function(e){return new t(e)})),r}var r,f,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),r=t,(f=[{key:"getMetaData",value:function(){if("LIST"!==this.id)throw new n.ParseError("Unexpected chunk ID","'LIST'","'".concat(this.id,"'"));var e=this.subChunks.reduce((function(e,t){if("ifil"===t.id||"iver"===t.id){if(t.length!==o.SF_VERSION_LENGTH)throw new n.ParseError("Invalid size for the '".concat(t.id,"' sub-chunk"));e[t.id]="".concat(t.getInt16(),".").concat(t.getInt16(2))}else e[t.id]=t.getString();return e}),{});if(!e.ifil)throw new n.ParseError("Missing required 'ifil' sub-chunk");if(!e.INAM)throw new n.ParseError("Missing required 'INAM' sub-chunk");return{version:e.ifil,soundEngine:e.isng||"EMU8000",name:e.INAM,rom:e.irom,romVersion:e.iver,creationDate:e.ICRD,author:e.IENG,product:e.IPRD,copyright:e.ICOP,comments:e.ICMT,createdBy:e.ISFT}}},{key:"getSampleData",value:function(){if("LIST"!==this.id)throw new n.ParseError("Unexpected chunk ID","'LIST'","'".concat(this.id,"'"));var e=this.subChunks[0];if("smpl"!==e.id)throw new n.ParseError("Invalid chunk signature","'smpl'","'".concat(e.id,"'"));return e.buffer}},{key:"getPresetData",value:function(){if("LIST"!==this.id)throw new n.ParseError("Unexpected chunk ID","'LIST'","'".concat(this.id,"'"));return{presetHeaders:Object(i.getPresetHeaders)(this.subChunks[0]),presetZones:Object(i.getZones)(this.subChunks[1],"pbag"),presetModulators:Object(i.getModulators)(this.subChunks[2],"pmod"),presetGenerators:Object(i.getGenerators)(this.subChunks[3],"pgen"),instrumentHeaders:Object(i.getInstrumentHeaders)(this.subChunks[4]),instrumentZones:Object(i.getZones)(this.subChunks[5],"ibag"),instrumentModulators:Object(i.getModulators)(this.subChunks[6],"imod"),instrumentGenerators:Object(i.getGenerators)(this.subChunks[7],"igen"),sampleHeaders:Object(i.getSampleHeaders)(this.subChunks[8])}}}])&&u(r.prototype,f),d&&u(r,d),t}(n.RIFFChunk)},"./src/chunks/generators.ts":
/*!**********************************!*\
  !*** ./src/chunks/generators.ts ***!
  \**********************************/
/*! exports provided: getGenerators */function(e,t,r){"use strict";r.r(t),r.d(t,"getGenerators",(function(){return c}));var n=r(/*! ~/riff */"./src/riff/index.ts"),o=r(/*! ~/types */"./src/types/index.ts"),i=r(/*! ~/constants */"./src/constants.ts"),s=[o.GeneratorType.StartAddrsOffset,o.GeneratorType.EndAddrsOffset,o.GeneratorType.StartLoopAddrsOffset,o.GeneratorType.EndLoopAddrsOffset,o.GeneratorType.StartAddrsCoarseOffset,o.GeneratorType.EndAddrsCoarseOffset,o.GeneratorType.StartLoopAddrsCoarseOffset,o.GeneratorType.KeyNum,o.GeneratorType.Velocity,o.GeneratorType.EndLoopAddrsCoarseOffset,o.GeneratorType.SampleModes,o.GeneratorType.ExclusiveClass,o.GeneratorType.OverridingRootKey],u=[o.GeneratorType.Unused1,o.GeneratorType.Unused2,o.GeneratorType.Unused3,o.GeneratorType.Unused4,o.GeneratorType.Reserved1,o.GeneratorType.Reserved2,o.GeneratorType.Reserved3],a=[o.GeneratorType.KeyRange,o.GeneratorType.VelRange],c=function(e,t){if(e.id!==t)throw new n.ParseError("Unexpected chunk ID","'".concat(t,"'"),"'".concat(e.id,"'"));if(e.length%i.SF_GENERATOR_SIZE)throw new n.ParseError("Invalid size for the '".concat(t,"' sub-chunk"));return e.iterate((function(e){var r=e.getInt16();return o.GeneratorType[r]?"pgen"===t&&s.includes(r)||"igen"===t&&u.includes(r)?null:a.includes(r)?{id:r,range:{lo:e.getByte(),hi:e.getByte()}}:{id:r,value:e.getInt16BE()}:null}))}},"./src/chunks/index.ts":
/*!*****************************!*\
  !*** ./src/chunks/index.ts ***!
  \*****************************/
/*! exports provided: getInstrumentHeaders, getPresetHeaders, getSampleHeaders, getGenerators, getModulators, getZones, getItemsInZone */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./instruments */"./src/chunks/instruments/index.ts");r.d(t,"getInstrumentHeaders",(function(){return n.getInstrumentHeaders}));var o=r(/*! ./presets */"./src/chunks/presets/index.ts");r.d(t,"getPresetHeaders",(function(){return o.getPresetHeaders}));var i=r(/*! ./samples */"./src/chunks/samples/index.ts");r.d(t,"getSampleHeaders",(function(){return i.getSampleHeaders}));var s=r(/*! ./generators */"./src/chunks/generators.ts");r.d(t,"getGenerators",(function(){return s.getGenerators}));var u=r(/*! ./modulators */"./src/chunks/modulators.ts");r.d(t,"getModulators",(function(){return u.getModulators}));var a=r(/*! ./zones */"./src/chunks/zones.ts");r.d(t,"getZones",(function(){return a.getZones})),r.d(t,"getItemsInZone",(function(){return a.getItemsInZone}))},"./src/chunks/instruments/headers.ts":
/*!*******************************************!*\
  !*** ./src/chunks/instruments/headers.ts ***!
  \*******************************************/
/*! exports provided: getInstrumentHeaders */function(e,t,r){"use strict";r.r(t),r.d(t,"getInstrumentHeaders",(function(){return i}));var n=r(/*! ~/riff */"./src/riff/index.ts"),o=r(/*! ~/constants */"./src/constants.ts"),i=function(e){if("inst"!==e.id)throw new n.ParseError("Unexpected chunk ID","'inst'","'".concat(e.id,"'"));if(e.length%o.SF_INSTRUMENT_HEADER_SIZE)throw new n.ParseError("Invalid size for the 'inst' sub-chunk");return e.iterate((function(e){return{name:e.getString(),bagIndex:e.getInt16()}}))}},"./src/chunks/instruments/index.ts":
/*!*****************************************!*\
  !*** ./src/chunks/instruments/index.ts ***!
  \*****************************************/
/*! exports provided: getInstrumentHeaders */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./headers */"./src/chunks/instruments/headers.ts");r.d(t,"getInstrumentHeaders",(function(){return n.getInstrumentHeaders}))},"./src/chunks/modulators.ts":
/*!**********************************!*\
  !*** ./src/chunks/modulators.ts ***!
  \**********************************/
/*! exports provided: getModulators */function(e,t,r){"use strict";r.r(t),r.d(t,"getModulators",(function(){return s}));var n=r(/*! ~/riff */"./src/riff/index.ts"),o=r(/*! ~/constants */"./src/constants.ts"),i=function(e){return{type:e>>10&63,polarity:e>>9&1,direction:e>>8&1,palette:e>>7&1,index:127&e}},s=function(e,t){if(e.id!==t)throw new n.ParseError("Unexpected chunk ID","'".concat(t,"'"),"'".concat(e.id,"'"));if(e.length%o.SF_MODULATOR_SIZE)throw new n.ParseError("Invalid size for the '".concat(t,"' sub-chunk"));return e.iterate((function(e){return{source:i(e.getInt16BE()),id:e.getInt16BE(),value:e.getInt16BE(),valueSource:i(e.getInt16BE()),transform:e.getInt16BE()}}))}},"./src/chunks/presets/headers.ts":
/*!***************************************!*\
  !*** ./src/chunks/presets/headers.ts ***!
  \***************************************/
/*! exports provided: getPresetHeaders */function(e,t,r){"use strict";r.r(t),r.d(t,"getPresetHeaders",(function(){return i}));var n=r(/*! ~/riff */"./src/riff/index.ts"),o=r(/*! ~/constants */"./src/constants.ts"),i=function(e){if("phdr"!==e.id)throw new n.ParseError("Invalid chunk ID","'phdr'","'".concat(e.id,"'"));if(e.length%o.SF_PRESET_HEADER_SIZE)throw new n.ParseError("Invalid size for the 'phdr' sub-chunk");return e.iterate((function(e){return{name:e.getString(),preset:e.getInt16(),bank:e.getInt16(),bagIndex:e.getInt16(),library:e.getUInt32(),genre:e.getUInt32(),morphology:e.getUInt32()}}))}},"./src/chunks/presets/index.ts":
/*!*************************************!*\
  !*** ./src/chunks/presets/index.ts ***!
  \*************************************/
/*! exports provided: getPresetHeaders */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./headers */"./src/chunks/presets/headers.ts");r.d(t,"getPresetHeaders",(function(){return n.getPresetHeaders}))},"./src/chunks/samples/headers.ts":
/*!***************************************!*\
  !*** ./src/chunks/samples/headers.ts ***!
  \***************************************/
/*! exports provided: getSampleHeaders */function(e,t,r){"use strict";r.r(t),r.d(t,"getSampleHeaders",(function(){return i}));var n=r(/*! ~/riff */"./src/riff/index.ts"),o=r(/*! ~/constants */"./src/constants.ts"),i=function(e){if("shdr"!==e.id)throw new n.ParseError("Unexpected chunk ID","'shdr'","'".concat(e.id,"'"));if(e.length%o.SF_SAMPLE_HEADER_SIZE)throw new n.ParseError("Invalid size for the 'shdr' sub-chunk");return e.iterate((function(e){return{name:e.getString(),start:e.getUInt32(),end:e.getUInt32(),startLoop:e.getUInt32(),endLoop:e.getUInt32(),sampleRate:e.getUInt32(),originalPitch:e.getByte(),pitchCorrection:e.getChar(),link:e.getInt16(),type:e.getInt16()}}))}},"./src/chunks/samples/index.ts":
/*!*************************************!*\
  !*** ./src/chunks/samples/index.ts ***!
  \*************************************/
/*! exports provided: getSampleHeaders */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./headers */"./src/chunks/samples/headers.ts");r.d(t,"getSampleHeaders",(function(){return n.getSampleHeaders}))},"./src/chunks/zones.ts":
/*!*****************************!*\
  !*** ./src/chunks/zones.ts ***!
  \*****************************/
/*! exports provided: getZones, getItemsInZone */function(e,t,r){"use strict";r.r(t),r.d(t,"getZones",(function(){return s})),r.d(t,"getItemsInZone",(function(){return u}));var n=r(/*! ~/riff */"./src/riff/index.ts"),o=r(/*! ~/constants */"./src/constants.ts"),i=r(/*! ~/types */"./src/types/index.ts"),s=function(e,t){if(e.id!==t)throw new n.ParseError("Unexpected chunk ID","'".concat(t,"'"),"'".concat(e.id,"'"));if(e.length%o.SF_BAG_SIZE)throw new n.ParseError("Invalid size for the '".concat(t,"' sub-chunk"));return e.iterate((function(e){return{generatorIndex:e.getInt16(),modulatorIndex:e.getInt16()}}))},u=function(e,t,r,n,o,s){for(var u=[],l=0;l<e.length;l++){for(var f=e[l],d=e[l+1],p=f.bagIndex,h=d?d.bagIndex:t.length,y=[],v=void 0,g=p;g<h;g++){var E=a(g,t,r),m=c(g,t,n),b=m[i.GeneratorType.KeyRange]&&m[i.GeneratorType.KeyRange].range,S=m[s];if(S){var T=o[S.value];T&&y.push({keyRange:b,modulators:E,generators:m,reference:T})}else g-p==0&&(v={keyRange:b,modulators:E,generators:m})}u.push({header:f,globalZone:v,zones:y})}return u},a=function(e,t,r){var n=t[e],o=t[e+1],i=n.modulatorIndex,s=o?o.modulatorIndex:t.length;return l(i,s,r)},c=function(e,t,r){var n=t[e],o=t[e+1],i=n.generatorIndex,s=o?o.generatorIndex:t.length;return l(i,s,r)},l=function(e,t,r){for(var n={},o=e;o<t;o++){var i=r[o];i&&(n[i.id]=i)}return n}},"./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! exports provided: SF_VERSION_LENGTH, SF_PRESET_HEADER_SIZE, SF_BAG_SIZE, SF_MODULATOR_SIZE, SF_GENERATOR_SIZE, SF_INSTRUMENT_HEADER_SIZE, SF_SAMPLE_HEADER_SIZE, DEFAULT_SAMPLE_RATE */function(e,t,r){"use strict";r.r(t),r.d(t,"SF_VERSION_LENGTH",(function(){return n})),r.d(t,"SF_PRESET_HEADER_SIZE",(function(){return o})),r.d(t,"SF_BAG_SIZE",(function(){return i})),r.d(t,"SF_MODULATOR_SIZE",(function(){return s})),r.d(t,"SF_GENERATOR_SIZE",(function(){return u})),r.d(t,"SF_INSTRUMENT_HEADER_SIZE",(function(){return a})),r.d(t,"SF_SAMPLE_HEADER_SIZE",(function(){return c})),r.d(t,"DEFAULT_SAMPLE_RATE",(function(){return l}));var n=4,o=38,i=4,s=10,u=4,a=22,c=46,l=22050},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./types */"./src/types/index.ts");for(var o in n)["default"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return n[e]}))}(o);var i=r(/*! ./chunk */"./src/chunk.ts");r.d(t,"SF2Chunk",(function(){return i.SF2Chunk}));var s=r(/*! ./constants */"./src/constants.ts");r.d(t,"SF_VERSION_LENGTH",(function(){return s.SF_VERSION_LENGTH})),r.d(t,"SF_PRESET_HEADER_SIZE",(function(){return s.SF_PRESET_HEADER_SIZE})),r.d(t,"SF_BAG_SIZE",(function(){return s.SF_BAG_SIZE})),r.d(t,"SF_MODULATOR_SIZE",(function(){return s.SF_MODULATOR_SIZE})),r.d(t,"SF_GENERATOR_SIZE",(function(){return s.SF_GENERATOR_SIZE})),r.d(t,"SF_INSTRUMENT_HEADER_SIZE",(function(){return s.SF_INSTRUMENT_HEADER_SIZE})),r.d(t,"SF_SAMPLE_HEADER_SIZE",(function(){return s.SF_SAMPLE_HEADER_SIZE})),r.d(t,"DEFAULT_SAMPLE_RATE",(function(){return s.DEFAULT_SAMPLE_RATE}));var u=r(/*! ./soundFont2 */"./src/soundFont2.ts");r.d(t,"SoundFont2",(function(){return u.SoundFont2}))},"./src/riff/chunkIterator.ts":
/*!***********************************!*\
  !*** ./src/riff/chunkIterator.ts ***!
  \***********************************/
/*! exports provided: ChunkIterator */function(e,t,r){"use strict";r.r(t),r.d(t,"ChunkIterator",(function(){return u}));var n=r(/*! ~/utils */"./src/utils/index.ts");function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;o(this,e),s(this,"target",[]),s(this,"chunk",void 0),s(this,"position",0),this.chunk=t,this.position=r}var t,r,u;return t=e,(r=[{key:"iterate",value:function(e){for(;this.position<this.chunk.length;){var t=e(this);t&&this.target.push(t)}}},{key:"getString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,t=Object(n.getStringFromBuffer)(this.getBuffer(this.position,e));return this.position+=e,t}},{key:"getInt16",value:function(){return this.chunk.buffer[this.position++]|this.chunk.buffer[this.position++]<<8}},{key:"getInt16BE",value:function(){return this.getInt16()<<16>>16}},{key:"getUInt32",value:function(){return(this.chunk.buffer[this.position++]|this.chunk.buffer[this.position++]<<8|this.chunk.buffer[this.position++]<<16|this.chunk.buffer[this.position++]<<24)>>>0}},{key:"getByte",value:function(){return this.chunk.buffer[this.position++]}},{key:"getChar",value:function(){return this.chunk.buffer[this.position++]<<24>>24}},{key:"skip",value:function(e){this.position+=e}},{key:"getBuffer",value:function(e,t){return this.chunk.buffer.subarray(e,e+t)}},{key:"currentPosition",get:function(){return this.position}}])&&i(t.prototype,r),u&&i(t,u),e}()},"./src/riff/index.ts":
/*!***************************!*\
  !*** ./src/riff/index.ts ***!
  \***************************/
/*! exports provided: ChunkIterator, ParseError, parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId, RIFFChunk */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./chunkIterator */"./src/riff/chunkIterator.ts");r.d(t,"ChunkIterator",(function(){return n.ChunkIterator}));var o=r(/*! ./parseError */"./src/riff/parseError.ts");r.d(t,"ParseError",(function(){return o.ParseError}));var i=r(/*! ./parser */"./src/riff/parser.ts");r.d(t,"parseBuffer",(function(){return i.parseBuffer})),r.d(t,"getChunk",(function(){return i.getChunk})),r.d(t,"getChunkLength",(function(){return i.getChunkLength})),r.d(t,"getSubChunks",(function(){return i.getSubChunks})),r.d(t,"getChunkId",(function(){return i.getChunkId}));var s=r(/*! ./riffChunk */"./src/riff/riffChunk.ts");r.d(t,"RIFFChunk",(function(){return s.RIFFChunk}))},"./src/riff/parseError.ts":
/*!********************************!*\
  !*** ./src/riff/parseError.ts ***!
  \********************************/
/*! exports provided: ParseError */function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e){var t="function"==typeof Map?new Map:void 0;return(i=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return u(e,arguments,c(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),a(n,e)})(e)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,r){return(u=s()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&a(o,r.prototype),o}).apply(null,arguments)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}r.r(t),r.d(t,"ParseError",(function(){return l}));var l=function(e){function t(e,r,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,c(t).call(this,"".concat(e).concat(r&&n?", expected ".concat(r,", received ").concat(n):"")))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(t,e),t}(i(Error))},"./src/riff/parser.ts":
/*!****************************!*\
  !*** ./src/riff/parser.ts ***!
  \****************************/
/*! exports provided: parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId */function(e,t,r){"use strict";r.r(t),r.d(t,"parseBuffer",(function(){return s})),r.d(t,"getChunk",(function(){return u})),r.d(t,"getChunkLength",(function(){return a})),r.d(t,"getSubChunks",(function(){return c})),r.d(t,"getChunkId",(function(){return l}));var n=r(/*! ./parseError */"./src/riff/parseError.ts"),o=r(/*! ~/utils/buffer */"./src/utils/buffer.ts"),i=r(/*! ./riffChunk */"./src/riff/riffChunk.ts"),s=function(e){var t=l(e);if("RIFF"!==t)throw new n.ParseError("Invalid file format","RIFF",t);var r=l(e,8);if("sfbk"!==r)throw new n.ParseError("Invalid signature","sfbk",r);var o=e.subarray(8),s=c(o.subarray(4));return new i.RIFFChunk(t,o.length,o,s)},u=function(e,t){var r=l(e,t),n=a(e,t+4),o=[];return"RIFF"!==r&&"LIST"!==r||(o=c(e.subarray(t+12))),new i.RIFFChunk(r,n,e.subarray(t+8),o)},a=function(e,t){return((e=e.subarray(t,t+4))[0]|e[1]<<8|e[2]<<16|e[3]<<24)>>>0},c=function(e){for(var t=[],r=0;r<=e.length-8;){var n=u(e,r);t.push(n),r=(r+=8+n.length)%2?r+1:r}return t},l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Object(o.getStringFromBuffer)(e.subarray(t,t+4))}},"./src/riff/riffChunk.ts":
/*!*******************************!*\
  !*** ./src/riff/riffChunk.ts ***!
  \*******************************/
/*! exports provided: RIFFChunk */function(e,t,r){"use strict";r.r(t),r.d(t,"RIFFChunk",(function(){return u}));var n=r(/*! ./chunkIterator */"./src/riff/chunkIterator.ts"),o=r(/*! ~/utils */"./src/utils/index.ts");function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u=function(){function e(t,r,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"id",void 0),s(this,"length",void 0),s(this,"buffer",void 0),s(this,"subChunks",void 0),this.id=t,this.length=r,this.buffer=n,this.subChunks=o}var t,r,u;return t=e,(r=[{key:"getString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;return Object(o.getStringFromBuffer)(this.getBuffer(e,t||this.length-e))}},{key:"getInt16",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.buffer[e++]|this.buffer[e]<<8}},{key:"getUInt32",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return(this.buffer[e++]|this.buffer[e++]<<8|this.buffer[e++]<<16|this.buffer[e]<<24)>>>0}},{key:"getByte",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.buffer[e]}},{key:"getChar",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.buffer[e]<<24>>24}},{key:"iterator",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return new n.ChunkIterator(this,e)}},{key:"iterate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=new n.ChunkIterator(this,t);return r.iterate(e),r.target}},{key:"getBuffer",value:function(e,t){return this.buffer.subarray(e,e+t)}}])&&i(t.prototype,r),u&&i(t,u),e}()},"./src/soundFont2.ts":
/*!***************************!*\
  !*** ./src/soundFont2.ts ***!
  \***************************/
/*! exports provided: SoundFont2 */function(e,t,r){"use strict";r.r(t),r.d(t,"SoundFont2",(function(){return d}));var n=r(/*! ./types */"./src/types/index.ts"),o=r(/*! ./chunk */"./src/chunk.ts"),i=r(/*! ./riff */"./src/riff/index.ts"),s=r(/*! ./chunks */"./src/chunks/index.ts"),u=r(/*! ./utils */"./src/utils/index.ts");function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){f(e,t,r[t])}))}return e}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),e}function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var d=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"chunk",void 0),f(this,"metaData",void 0),f(this,"sampleData",void 0),f(this,"samples",void 0),f(this,"presetData",void 0),f(this,"instruments",void 0),f(this,"presets",void 0),f(this,"banks",void 0),!(t instanceof o.SF2Chunk)){var r=Object(i.parseBuffer)(t);t=new o.SF2Chunk(r)}if(3!==t.subChunks.length)throw new i.ParseError("Invalid sfbk structure","3 chunks","".concat(t.subChunks.length," chunks"));this.chunk=t,this.metaData=t.subChunks[0].getMetaData(),this.sampleData=t.subChunks[1].getSampleData(),this.presetData=t.subChunks[2].getPresetData(),this.samples=this.getSamples(),this.instruments=this.getInstruments(),this.presets=this.getPresets(),this.banks=this.getBanks()}return l(e,null,[{key:"from",value:function(t){return new e(t)}}]),l(e,[{key:"getKeyData",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Object(u.memoize)((function(e,r,n){var o=t.banks[r];if(o){var i=o.presets[n];if(i){var s=i.zones.filter((function(r){return t.isKeyInRange(r,e)}));if(s.length>0){var u=!0,c=!1,l=void 0;try{for(var f,d=s[Symbol.iterator]();!(u=(f=d.next()).done);u=!0){var p=f.value,h=p.instrument,y=h.zones.filter((function(r){return t.isKeyInRange(r,e)}));if(y.length>0){var v=!0,g=!1,E=void 0;try{for(var m,b=y[Symbol.iterator]();!(v=(m=b.next()).done);v=!0){var S=m.value,T=S.sample,I=a({},p.generators,S.generators),k=a({},p.modulators,S.modulators);return{keyNumber:e,preset:i,instrument:h,sample:T,generators:I,modulators:k}}}catch(e){g=!0,E=e}finally{try{v||null==b.return||b.return()}finally{if(g)throw E}}}}}catch(e){c=!0,l=e}finally{try{u||null==d.return||d.return()}finally{if(c)throw l}}}}}return null}))(e,r,n)}},{key:"isKeyInRange",value:function(e,t){return void 0===e.keyRange||e.keyRange.lo<=t&&e.keyRange.hi>=t}},{key:"getBanks",value:function(){return this.presets.reduce((function(e,t){var r=t.header.bank;return e[r]||(e[r]={presets:[]}),e[r].presets[t.header.preset]=t,e}),[])}},{key:"getPresets",value:function(){var e=this.presetData,t=e.presetHeaders,r=e.presetZones,o=e.presetGenerators,i=e.presetModulators;return Object(s.getItemsInZone)(t,r,i,o,this.instruments,n.GeneratorType.Instrument).filter((function(e){return"EOP"!==e.header.name})).map((function(e){return{header:e.header,globalZone:e.globalZone,zones:e.zones.map((function(e){return{keyRange:e.keyRange,generators:e.generators,modulators:e.modulators,instrument:e.reference}}))}}))}},{key:"getInstruments",value:function(){var e=this.presetData,t=e.instrumentHeaders,r=e.instrumentZones,o=e.instrumentModulators,i=e.instrumentGenerators;return Object(s.getItemsInZone)(t,r,o,i,this.samples,n.GeneratorType.SampleId).filter((function(e){return"EOI"!==e.header.name})).map((function(e){return{header:e.header,globalZone:e.globalZone,zones:e.zones.map((function(e){return{keyRange:e.keyRange,generators:e.generators,modulators:e.modulators,sample:e.reference}}))}}))}},{key:"getSamples",value:function(){var e=this;return this.presetData.sampleHeaders.filter((function(e){return"EOS"!==e.name})).map((function(t){if("EOS"!==t.name&&t.sampleRate<=0)throw new Error("Illegal sample rate of ".concat(t.sampleRate," hz in sample '").concat(t.name,"'"));return t.originalPitch>=128&&t.originalPitch<=254&&(t.originalPitch=60),t.startLoop-=t.start,t.endLoop-=t.start,{header:t,data:new Int16Array(new Uint8Array(e.sampleData.subarray(2*t.start,2*t.end)).buffer)}}))}}]),e}()},"./src/types/bank.ts":
/*!***************************!*\
  !*** ./src/types/bank.ts ***!
  \***************************/
/*! no static exports found */function(e,t){},"./src/types/generator.ts":
/*!********************************!*\
  !*** ./src/types/generator.ts ***!
  \********************************/
/*! exports provided: GeneratorType, DEFAULT_GENERATOR_VALUES */function(e,t,r){"use strict";var n,o;function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.r(t),r.d(t,"GeneratorType",(function(){return o})),r.d(t,"DEFAULT_GENERATOR_VALUES",(function(){return s})),function(e){e[e.StartAddrsOffset=0]="StartAddrsOffset",e[e.EndAddrsOffset=1]="EndAddrsOffset",e[e.StartLoopAddrsOffset=2]="StartLoopAddrsOffset",e[e.EndLoopAddrsOffset=3]="EndLoopAddrsOffset",e[e.StartAddrsCoarseOffset=4]="StartAddrsCoarseOffset",e[e.ModLFOToPitch=5]="ModLFOToPitch",e[e.VibLFOToPitch=6]="VibLFOToPitch",e[e.ModEnvToPitch=7]="ModEnvToPitch",e[e.InitialFilterFc=8]="InitialFilterFc",e[e.InitialFilterQ=9]="InitialFilterQ",e[e.ModLFOToFilterFc=10]="ModLFOToFilterFc",e[e.ModEnvToFilterFc=11]="ModEnvToFilterFc",e[e.EndAddrsCoarseOffset=12]="EndAddrsCoarseOffset",e[e.ModLFOToVolume=13]="ModLFOToVolume",e[e.Unused1=14]="Unused1",e[e.ChorusEffectsSend=15]="ChorusEffectsSend",e[e.ReverbEffectsSend=16]="ReverbEffectsSend",e[e.Pan=17]="Pan",e[e.Unused2=18]="Unused2",e[e.Unused3=19]="Unused3",e[e.Unused4=20]="Unused4",e[e.DelayModLFO=21]="DelayModLFO",e[e.FreqModLFO=22]="FreqModLFO",e[e.DelayVibLFO=23]="DelayVibLFO",e[e.FreqVibLFO=24]="FreqVibLFO",e[e.DelayModEnv=25]="DelayModEnv",e[e.AttackModEnv=26]="AttackModEnv",e[e.HoldModEnv=27]="HoldModEnv",e[e.DecayModEnv=28]="DecayModEnv",e[e.SustainModEnv=29]="SustainModEnv",e[e.ReleaseModEnv=30]="ReleaseModEnv",e[e.KeyNumToModEnvHold=31]="KeyNumToModEnvHold",e[e.KeyNumToModEnvDecay=32]="KeyNumToModEnvDecay",e[e.DelayVolEnv=33]="DelayVolEnv",e[e.AttackVolEnv=34]="AttackVolEnv",e[e.HoldVolEnv=35]="HoldVolEnv",e[e.DecayVolEnv=36]="DecayVolEnv",e[e.SustainVolEnv=37]="SustainVolEnv",e[e.ReleaseVolEnv=38]="ReleaseVolEnv",e[e.KeyNumToVolEnvHold=39]="KeyNumToVolEnvHold",e[e.KeyNumToVolEnvDecay=40]="KeyNumToVolEnvDecay",e[e.Instrument=41]="Instrument",e[e.Reserved1=42]="Reserved1",e[e.KeyRange=43]="KeyRange",e[e.VelRange=44]="VelRange",e[e.StartLoopAddrsCoarseOffset=45]="StartLoopAddrsCoarseOffset",e[e.KeyNum=46]="KeyNum",e[e.Velocity=47]="Velocity",e[e.InitialAttenuation=48]="InitialAttenuation",e[e.Reserved2=49]="Reserved2",e[e.EndLoopAddrsCoarseOffset=50]="EndLoopAddrsCoarseOffset",e[e.CoarseTune=51]="CoarseTune",e[e.FineTune=52]="FineTune",e[e.SampleId=53]="SampleId",e[e.SampleModes=54]="SampleModes",e[e.Reserved3=55]="Reserved3",e[e.ScaleTuning=56]="ScaleTuning",e[e.ExclusiveClass=57]="ExclusiveClass",e[e.OverridingRootKey=58]="OverridingRootKey",e[e.Unused5=59]="Unused5",e[e.EndOper=60]="EndOper"}(o||(o={}));var s=(i(n={},o.StartAddrsOffset,0),i(n,o.EndAddrsOffset,0),i(n,o.StartLoopAddrsOffset,0),i(n,o.EndLoopAddrsOffset,0),i(n,o.StartAddrsCoarseOffset,0),i(n,o.ModLFOToPitch,0),i(n,o.VibLFOToPitch,0),i(n,o.ModEnvToPitch,0),i(n,o.InitialFilterFc,13500),i(n,o.InitialFilterQ,0),i(n,o.ModLFOToFilterFc,0),i(n,o.ModEnvToFilterFc,0),i(n,o.EndAddrsCoarseOffset,0),i(n,o.ModLFOToVolume,0),i(n,o.ChorusEffectsSend,0),i(n,o.ReverbEffectsSend,0),i(n,o.Pan,0),i(n,o.DelayModLFO,-12e3),i(n,o.FreqModLFO,0),i(n,o.DelayVibLFO,-12e3),i(n,o.FreqVibLFO,0),i(n,o.DelayModEnv,-12e3),i(n,o.AttackModEnv,-12e3),i(n,o.HoldModEnv,-12e3),i(n,o.DecayModEnv,-12e3),i(n,o.SustainModEnv,0),i(n,o.ReleaseModEnv,-12e3),i(n,o.KeyNumToModEnvHold,0),i(n,o.KeyNumToModEnvDecay,0),i(n,o.DelayVolEnv,-12e3),i(n,o.AttackVolEnv,-12e3),i(n,o.HoldVolEnv,-12e3),i(n,o.DecayVolEnv,-12e3),i(n,o.SustainVolEnv,0),i(n,o.ReleaseVolEnv,-12e3),i(n,o.KeyNumToVolEnvHold,0),i(n,o.KeyNumToVolEnvDecay,0),i(n,o.StartLoopAddrsCoarseOffset,0),i(n,o.KeyNum,-1),i(n,o.Velocity,-1),i(n,o.InitialAttenuation,0),i(n,o.EndLoopAddrsCoarseOffset,0),i(n,o.CoarseTune,0),i(n,o.FineTune,0),i(n,o.SampleModes,0),i(n,o.ScaleTuning,100),i(n,o.ExclusiveClass,0),i(n,o.OverridingRootKey,-1),n)},"./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/*! no static exports found */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./bank */"./src/types/bank.ts");for(var o in n)["default"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return n[e]}))}(o);var i=r(/*! ./generator */"./src/types/generator.ts");r.d(t,"GeneratorType",(function(){return i.GeneratorType})),r.d(t,"DEFAULT_GENERATOR_VALUES",(function(){return i.DEFAULT_GENERATOR_VALUES}));var s=r(/*! ./instrument */"./src/types/instrument.ts");for(var o in s)["default","GeneratorType","DEFAULT_GENERATOR_VALUES"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return s[e]}))}(o);var u=r(/*! ./key */"./src/types/key.ts");for(var o in u)["default","GeneratorType","DEFAULT_GENERATOR_VALUES"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return u[e]}))}(o);var a=r(/*! ./metaData */"./src/types/metaData.ts");for(var o in a)["default","GeneratorType","DEFAULT_GENERATOR_VALUES"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return a[e]}))}(o);var c=r(/*! ./modulator */"./src/types/modulator.ts");r.d(t,"ControllerType",(function(){return c.ControllerType})),r.d(t,"ControllerPolarity",(function(){return c.ControllerPolarity})),r.d(t,"ControllerDirection",(function(){return c.ControllerDirection})),r.d(t,"ControllerPalette",(function(){return c.ControllerPalette})),r.d(t,"Controller",(function(){return c.Controller})),r.d(t,"TransformType",(function(){return c.TransformType})),r.d(t,"DEFAULT_INSTRUMENT_MODULATORS",(function(){return c.DEFAULT_INSTRUMENT_MODULATORS}));var l=r(/*! ./preset */"./src/types/preset.ts");for(var o in l)["default","GeneratorType","DEFAULT_GENERATOR_VALUES","ControllerType","ControllerPolarity","ControllerDirection","ControllerPalette","Controller","TransformType","DEFAULT_INSTRUMENT_MODULATORS"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return l[e]}))}(o);var f=r(/*! ./presetData */"./src/types/presetData.ts");for(var o in f)["default","GeneratorType","DEFAULT_GENERATOR_VALUES","ControllerType","ControllerPolarity","ControllerDirection","ControllerPalette","Controller","TransformType","DEFAULT_INSTRUMENT_MODULATORS"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return f[e]}))}(o);var d=r(/*! ./sample */"./src/types/sample.ts");r.d(t,"SampleType",(function(){return d.SampleType}));var p=r(/*! ./zone */"./src/types/zone.ts");for(var o in p)["default","GeneratorType","DEFAULT_GENERATOR_VALUES","ControllerType","ControllerPolarity","ControllerDirection","ControllerPalette","Controller","TransformType","DEFAULT_INSTRUMENT_MODULATORS","SampleType"].indexOf(o)<0&&function(e){r.d(t,e,(function(){return p[e]}))}(o)},"./src/types/instrument.ts":
/*!*********************************!*\
  !*** ./src/types/instrument.ts ***!
  \*********************************/
/*! no static exports found */function(e,t){},"./src/types/key.ts":
/*!**************************!*\
  !*** ./src/types/key.ts ***!
  \**************************/
/*! no static exports found */function(e,t){},"./src/types/metaData.ts":
/*!*******************************!*\
  !*** ./src/types/metaData.ts ***!
  \*******************************/
/*! no static exports found */function(e,t){},"./src/types/modulator.ts":
/*!********************************!*\
  !*** ./src/types/modulator.ts ***!
  \********************************/
/*! exports provided: ControllerType, ControllerPolarity, ControllerDirection, ControllerPalette, Controller, TransformType, DEFAULT_INSTRUMENT_MODULATORS */function(e,t,r){"use strict";r.r(t),r.d(t,"ControllerType",(function(){return n})),r.d(t,"ControllerPolarity",(function(){return o})),r.d(t,"ControllerDirection",(function(){return i})),r.d(t,"ControllerPalette",(function(){return s})),r.d(t,"Controller",(function(){return u})),r.d(t,"TransformType",(function(){return a})),r.d(t,"DEFAULT_INSTRUMENT_MODULATORS",(function(){return l}));var n,o,i,s,u,a,c=r(/*! ./generator */"./src/types/generator.ts");!function(e){e[e.Linear=0]="Linear",e[e.Concave=1]="Concave",e[e.Convex=2]="Convex",e[e.Switch=3]="Switch"}(n||(n={})),function(e){e[e.Unipolar=0]="Unipolar",e[e.Bipolar=1]="Bipolar"}(o||(o={})),function(e){e[e.Increasing=0]="Increasing",e[e.Decreasing=1]="Decreasing"}(i||(i={})),function(e){e[e.GeneralController=0]="GeneralController",e[e.MidiController=1]="MidiController"}(s||(s={})),function(e){e[e.NoController=0]="NoController",e[e.NoteOnVelocity=2]="NoteOnVelocity",e[e.NoteOnKeyNumber=3]="NoteOnKeyNumber",e[e.PolyPressure=10]="PolyPressure",e[e.ChannelPressure=13]="ChannelPressure",e[e.PitchWheel=14]="PitchWheel",e[e.PitchWheelSensitivity=16]="PitchWheelSensitivity",e[e.Link=127]="Link"}(u||(u={})),function(e){e[e.Linear=0]="Linear",e[e.Absolute=2]="Absolute"}(a||(a={}));var l=[{id:c.GeneratorType.InitialAttenuation,source:{type:n.Concave,polarity:o.Unipolar,direction:i.Decreasing,palette:s.GeneralController,index:u.NoteOnVelocity},value:960,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.InitialFilterFc,source:{type:n.Linear,polarity:o.Unipolar,direction:i.Decreasing,palette:s.GeneralController,index:u.NoteOnVelocity},value:-2400,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.VibLFOToPitch,source:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.ChannelPressure},value:50,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.VibLFOToPitch,source:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.MidiController,index:1},value:50,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.InitialAttenuation,source:{type:n.Concave,polarity:o.Unipolar,direction:i.Decreasing,palette:s.MidiController,index:7},value:960,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.InitialAttenuation,source:{type:n.Linear,polarity:o.Bipolar,direction:i.Increasing,palette:s.MidiController,index:10},value:1e3,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.InitialAttenuation,source:{type:n.Concave,polarity:o.Unipolar,direction:i.Decreasing,palette:s.MidiController,index:11},value:960,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.ReverbEffectsSend,source:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.MidiController,index:91},value:200,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.ChorusEffectsSend,source:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.MidiController,index:93},value:200,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.NoController},transform:a.Linear},{id:c.GeneratorType.CoarseTune,source:{type:n.Linear,polarity:o.Bipolar,direction:i.Increasing,palette:s.GeneralController,index:u.PitchWheel},value:12700,valueSource:{type:n.Linear,polarity:o.Unipolar,direction:i.Increasing,palette:s.GeneralController,index:u.PitchWheelSensitivity},transform:a.Linear}]},"./src/types/preset.ts":
/*!*****************************!*\
  !*** ./src/types/preset.ts ***!
  \*****************************/
/*! no static exports found */function(e,t){},"./src/types/presetData.ts":
/*!*********************************!*\
  !*** ./src/types/presetData.ts ***!
  \*********************************/
/*! no static exports found */function(e,t){},"./src/types/sample.ts":
/*!*****************************!*\
  !*** ./src/types/sample.ts ***!
  \*****************************/
/*! exports provided: SampleType */function(e,t,r){"use strict";var n;r.r(t),r.d(t,"SampleType",(function(){return n})),function(e){e[e.EOS=0]="EOS",e[e.Mono=1]="Mono",e[e.Right=2]="Right",e[e.Left=4]="Left",e[e.Linked=8]="Linked",e[e.RomMono=32769]="RomMono",e[e.RomRight=32770]="RomRight",e[e.RomLeft=32772]="RomLeft",e[e.RomLinked=32776]="RomLinked"}(n||(n={}))},"./src/types/zone.ts":
/*!***************************!*\
  !*** ./src/types/zone.ts ***!
  \***************************/
/*! no static exports found */function(e,t){},"./src/utils/buffer.ts":
/*!*****************************!*\
  !*** ./src/utils/buffer.ts ***!
  \*****************************/
/*! exports provided: getStringFromBuffer */function(e,t,r){"use strict";r.r(t),r.d(t,"getStringFromBuffer",(function(){return n}));var n=function(e){var t=new TextDecoder("utf8").decode(e),r=t.indexOf("\0");return(-1===r?t:t.slice(0,r)).trim()}},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! exports provided: getStringFromBuffer, memoize */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./buffer */"./src/utils/buffer.ts");r.d(t,"getStringFromBuffer",(function(){return n.getStringFromBuffer}));var o=r(/*! ./memoize */"./src/utils/memoize.ts");r.d(t,"memoize",(function(){return o.memoize}))},"./src/utils/memoize.ts":
/*!******************************!*\
  !*** ./src/utils/memoize.ts ***!
  \******************************/
/*! exports provided: memoize */function(e,t,r){"use strict";r.r(t),r.d(t,"memoize",(function(){return n}));var n=function(e){var t={};return function(){for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];var i=JSON.stringify(n);if(i in t)return t[i];var s=e.apply(void 0,n);return t[i]=s,s}}}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,